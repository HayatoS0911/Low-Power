
LowPowerTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003664  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800382c  0800382c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800382c  0800382c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800382c  0800382c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003830  08003830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08003840  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08003840  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc89  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a6  00000000  00000000  0002fcc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00032070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00032f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a04  00000000  00000000  00033d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001114d  00000000  00000000  0005b76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f587a  00000000  00000000  0006c8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162133  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d90  00000000  00000000  00162184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037d4 	.word	0x080037d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080037d4 	.word	0x080037d4

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001de:	4b24      	ldr	r3, [pc, #144]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e2:	4a23      	ldr	r2, [pc, #140]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001e4:	f043 0304 	orr.w	r3, r3, #4
 80001e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001ea:	4b21      	ldr	r3, [pc, #132]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001ee:	f003 0304 	and.w	r3, r3, #4
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80001f6:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001fa:	4a1d      	ldr	r2, [pc, #116]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000202:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020e:	4b18      	ldr	r3, [pc, #96]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000212:	4a17      	ldr	r2, [pc, #92]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800021a:	4b15      	ldr	r3, [pc, #84]	; (8000270 <MX_GPIO_Init+0xa8>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021e:	f003 0301 	and.w	r3, r3, #1
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000226:	4b12      	ldr	r3, [pc, #72]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022a:	4a11      	ldr	r2, [pc, #68]	; (8000270 <MX_GPIO_Init+0xa8>)
 800022c:	f043 0302 	orr.w	r3, r3, #2
 8000230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000232:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000236:	f003 0302 	and.w	r3, r3, #2
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	2120      	movs	r1, #32
 8000242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000246:	f000 ff2f 	bl	80010a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800024a:	2320      	movs	r3, #32
 800024c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024e:	2301      	movs	r3, #1
 8000250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000252:	2300      	movs	r3, #0
 8000254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000256:	2300      	movs	r3, #0
 8000258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800025a:	f107 0314 	add.w	r3, r7, #20
 800025e:	4619      	mov	r1, r3
 8000260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000264:	f000 fd76 	bl	8000d54 <HAL_GPIO_Init>

}
 8000268:	bf00      	nop
 800026a:	3728      	adds	r7, #40	; 0x28
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40021000 	.word	0x40021000

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t mode = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027e:	f000 fb97 	bl	80009b0 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 8000282:	f000 f949 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000286:	f7ff ff9f 	bl	80001c8 <MX_GPIO_Init>
  MX_RTC_Init();
 800028a:	f000 fa1f 	bl	80006cc <MX_RTC_Init>
  MX_TIM2_Init();
 800028e:	f000 faf3 	bl	8000878 <MX_TIM2_Init>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // select HSI as system clock source after Wake-Up from Stop mode
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG( RCC_STOP_WAKEUPCLOCK_HSI );
 8000292:	4b9e      	ldr	r3, [pc, #632]	; (800050c <main+0x298>)
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	4a9d      	ldr	r2, [pc, #628]	; (800050c <main+0x298>)
 8000298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800029c:	6093      	str	r3, [r2, #8]

  while (1)
  {
    /* USER CODE END WHILE */

	  switch(mode)
 800029e:	78fb      	ldrb	r3, [r7, #3]
 80002a0:	2b09      	cmp	r3, #9
 80002a2:	d8fc      	bhi.n	800029e <main+0x2a>
 80002a4:	a201      	add	r2, pc, #4	; (adr r2, 80002ac <main+0x38>)
 80002a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002aa:	bf00      	nop
 80002ac:	080002d5 	.word	0x080002d5
 80002b0:	080002d7 	.word	0x080002d7
 80002b4:	08000319 	.word	0x08000319
 80002b8:	08000323 	.word	0x08000323
 80002bc:	08000365 	.word	0x08000365
 80002c0:	080003b5 	.word	0x080003b5
 80002c4:	080003ff 	.word	0x080003ff
 80002c8:	0800044b 	.word	0x0800044b
 80002cc:	08000493 	.word	0x08000493
 80002d0:	080004ef 	.word	0x080004ef
	  {
	  	  case 0: // Run
	  		  while (1)
 80002d4:	e7fe      	b.n	80002d4 <main+0x60>
	  		  {

	  		  }
	  		  break;
	  	  case 1: // LPRun
	  		  HAL_SuspendTick();													// Stop Systick timer
 80002d6:	f000 fc0b 	bl	8000af0 <HAL_SuspendTick>

	  		  SystemClock_Config_UseMSI();											// Use System Clock MSI
 80002da:	f000 f97d 	bl	80005d8 <SystemClock_Config_UseMSI>
	  		  HAL_PWREx_EnableLowPowerRunMode();									// Enter Low Power Run
 80002de:	f000 ffef 	bl	80012c0 <HAL_PWREx_EnableLowPowerRunMode>
	  		  HAL_Delay(3000);														// Wait 3000ms
 80002e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80002e6:	f000 fbdf 	bl	8000aa8 <HAL_Delay>
	  		  HAL_PWREx_DisableLowPowerRunMode();									// Disable Low Power Run
 80002ea:	f000 fff9 	bl	80012e0 <HAL_PWREx_DisableLowPowerRunMode>
	  		  SystemClock_Config();													// Use Sysmtem Clock HSI
 80002ee:	f000 f913 	bl	8000518 <SystemClock_Config>

	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);				// LD2 ON
 80002f2:	2201      	movs	r2, #1
 80002f4:	2120      	movs	r1, #32
 80002f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fa:	f000 fed5 	bl	80010a8 <HAL_GPIO_WritePin>
	  		  HAL_ResumeTick();														// Resume Systick timer
 80002fe:	f000 fc07 	bl	8000b10 <HAL_ResumeTick>
	  		  HAL_Delay(1000);														// Wait 1000ms
 8000302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000306:	f000 fbcf 	bl	8000aa8 <HAL_Delay>
	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);			// LD2 OFF
 800030a:	2200      	movs	r2, #0
 800030c:	2120      	movs	r1, #32
 800030e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000312:	f000 fec9 	bl	80010a8 <HAL_GPIO_WritePin>
	  		  break;
 8000316:	e0f7      	b.n	8000508 <main+0x294>
	  	  case 2: // HAL_Delay
	  		  while(1)
	  		  {
	  			  HAL_Delay(10000);													// Wait 10000ms
 8000318:	f242 7010 	movw	r0, #10000	; 0x2710
 800031c:	f000 fbc4 	bl	8000aa8 <HAL_Delay>
 8000320:	e7fa      	b.n	8000318 <main+0xa4>
	  		  }
	  		  break;
	  	  case 3: // Sleep
	  		  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);								// Disable Wakeup Timer
 8000322:	487b      	ldr	r0, [pc, #492]	; (8000510 <main+0x29c>)
 8000324:	f002 fcea 	bl	8002cfc <HAL_RTCEx_DeactivateWakeUpTimer>
	  		  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,10,RTC_WAKEUPCLOCK_CK_SPRE_16BITS);	// Set wake up timer with intterupt RTC
 8000328:	2204      	movs	r2, #4
 800032a:	210a      	movs	r1, #10
 800032c:	4878      	ldr	r0, [pc, #480]	; (8000510 <main+0x29c>)
 800032e:	f002 fc51 	bl	8002bd4 <HAL_RTCEx_SetWakeUpTimer_IT>
	  		  HAL_SuspendTick();													// Stop Systick timer
 8000332:	f000 fbdd 	bl	8000af0 <HAL_SuspendTick>

	  		  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFE);		// Enter Sleep Mode, WakeUpEvent WFE
 8000336:	2102      	movs	r1, #2
 8000338:	2000      	movs	r0, #0
 800033a:	f000 fef7 	bl	800112c <HAL_PWR_EnterSLEEPMode>

	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);				// LD2 ON
 800033e:	2201      	movs	r2, #1
 8000340:	2120      	movs	r1, #32
 8000342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000346:	f000 feaf 	bl	80010a8 <HAL_GPIO_WritePin>
	  		  HAL_ResumeTick();														// Resume Systick timer
 800034a:	f000 fbe1 	bl	8000b10 <HAL_ResumeTick>
	  		  HAL_Delay(1000);														// Wait 1000ms
 800034e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000352:	f000 fba9 	bl	8000aa8 <HAL_Delay>
	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);			// LD2 OFF
 8000356:	2200      	movs	r2, #0
 8000358:	2120      	movs	r1, #32
 800035a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035e:	f000 fea3 	bl	80010a8 <HAL_GPIO_WritePin>
	  		  break;
 8000362:	e0d1      	b.n	8000508 <main+0x294>
	  	  case 4: // LPSleep
	  		  SystemClock_Config_UseMSI();											// Use System Clock MSI
 8000364:	f000 f938 	bl	80005d8 <SystemClock_Config_UseMSI>
	  		  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);								// Disable Wakeup Timer
 8000368:	4869      	ldr	r0, [pc, #420]	; (8000510 <main+0x29c>)
 800036a:	f002 fcc7 	bl	8002cfc <HAL_RTCEx_DeactivateWakeUpTimer>
	  		  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,10,RTC_WAKEUPCLOCK_CK_SPRE_16BITS);	// Set wake up timer with intterupt RTC
 800036e:	2204      	movs	r2, #4
 8000370:	210a      	movs	r1, #10
 8000372:	4867      	ldr	r0, [pc, #412]	; (8000510 <main+0x29c>)
 8000374:	f002 fc2e 	bl	8002bd4 <HAL_RTCEx_SetWakeUpTimer_IT>
	  		  HAL_SuspendTick();													// Stop Systick timer
 8000378:	f000 fbba 	bl	8000af0 <HAL_SuspendTick>

	  		  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON,PWR_SLEEPENTRY_WFE);	// Enter Low Power Sleep Mode, WakeUpEvent WFE
 800037c:	2102      	movs	r1, #2
 800037e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000382:	f000 fed3 	bl	800112c <HAL_PWR_EnterSLEEPMode>
	  		  HAL_PWREx_DisableLowPowerRunMode();										// Disable Low Power Run
 8000386:	f000 ffab 	bl	80012e0 <HAL_PWREx_DisableLowPowerRunMode>
	  		  SystemClock_Config();													// Use Sysmtem Clock HSI
 800038a:	f000 f8c5 	bl	8000518 <SystemClock_Config>

	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);				// LD2 ON
 800038e:	2201      	movs	r2, #1
 8000390:	2120      	movs	r1, #32
 8000392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000396:	f000 fe87 	bl	80010a8 <HAL_GPIO_WritePin>
	  		  HAL_ResumeTick();														// Resume Systick timer
 800039a:	f000 fbb9 	bl	8000b10 <HAL_ResumeTick>
	  		  HAL_Delay(1000);														// Wait 1000ms
 800039e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a2:	f000 fb81 	bl	8000aa8 <HAL_Delay>
	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);			// LD2 OFF
 80003a6:	2200      	movs	r2, #0
 80003a8:	2120      	movs	r1, #32
 80003aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ae:	f000 fe7b 	bl	80010a8 <HAL_GPIO_WritePin>
	  		  break;
 80003b2:	e0a9      	b.n	8000508 <main+0x294>
	  	  case 5: // Stop0
	  		  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);								// Disable Wakeup Timer
 80003b4:	4856      	ldr	r0, [pc, #344]	; (8000510 <main+0x29c>)
 80003b6:	f002 fca1 	bl	8002cfc <HAL_RTCEx_DeactivateWakeUpTimer>
	  		  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,10,RTC_WAKEUPCLOCK_CK_SPRE_16BITS);	// Set wake up timer with intterupt RTC
 80003ba:	2204      	movs	r2, #4
 80003bc:	210a      	movs	r1, #10
 80003be:	4854      	ldr	r0, [pc, #336]	; (8000510 <main+0x29c>)
 80003c0:	f002 fc08 	bl	8002bd4 <HAL_RTCEx_SetWakeUpTimer_IT>
	  		  HAL_SuspendTick();													// Stop Systick timer
 80003c4:	f000 fb94 	bl	8000af0 <HAL_SuspendTick>

	  		  HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE);		// Enter Stop0 Mode, Wake Up Event
 80003c8:	2102      	movs	r1, #2
 80003ca:	2000      	movs	r0, #0
 80003cc:	f000 fee2 	bl	8001194 <HAL_PWR_EnterSTOPMode>
	  		  HAL_PWREx_DisableLowPowerRunMode();									// Disable Low Power Run
 80003d0:	f000 ff86 	bl	80012e0 <HAL_PWREx_DisableLowPowerRunMode>
	  		  SystemClock_Config();													// Use Sysmtem Clock HSI
 80003d4:	f000 f8a0 	bl	8000518 <SystemClock_Config>

	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);				// LD2 ON
 80003d8:	2201      	movs	r2, #1
 80003da:	2120      	movs	r1, #32
 80003dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e0:	f000 fe62 	bl	80010a8 <HAL_GPIO_WritePin>
	  		  HAL_ResumeTick();														// Resume Systick timer
 80003e4:	f000 fb94 	bl	8000b10 <HAL_ResumeTick>
	  		  HAL_Delay(1000);														// Wait 1000ms
 80003e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ec:	f000 fb5c 	bl	8000aa8 <HAL_Delay>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);			// LD2 OFF
 80003f0:	2200      	movs	r2, #0
 80003f2:	2120      	movs	r1, #32
 80003f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f8:	f000 fe56 	bl	80010a8 <HAL_GPIO_WritePin>
			  break;
 80003fc:	e084      	b.n	8000508 <main+0x294>
	  	  case 6: // stop1
	  		  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);								// Disable Wakeup Timer
 80003fe:	4844      	ldr	r0, [pc, #272]	; (8000510 <main+0x29c>)
 8000400:	f002 fc7c 	bl	8002cfc <HAL_RTCEx_DeactivateWakeUpTimer>
	  		  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,10,RTC_WAKEUPCLOCK_CK_SPRE_16BITS);	// Set wake up timer with intterupt RTC
 8000404:	2204      	movs	r2, #4
 8000406:	210a      	movs	r1, #10
 8000408:	4841      	ldr	r0, [pc, #260]	; (8000510 <main+0x29c>)
 800040a:	f002 fbe3 	bl	8002bd4 <HAL_RTCEx_SetWakeUpTimer_IT>
	  		  HAL_SuspendTick();													// Stop Systick timer
 800040e:	f000 fb6f 	bl	8000af0 <HAL_SuspendTick>

	  		  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE);	// Enter Stop1 Mode, Wake Up Event
 8000412:	2102      	movs	r1, #2
 8000414:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000418:	f000 febc 	bl	8001194 <HAL_PWR_EnterSTOPMode>
	  		  HAL_PWREx_DisableLowPowerRunMode();									// Disable Low Power Run
 800041c:	f000 ff60 	bl	80012e0 <HAL_PWREx_DisableLowPowerRunMode>
	  		  SystemClock_Config();													// Use Sysmtem Clock HSI
 8000420:	f000 f87a 	bl	8000518 <SystemClock_Config>

	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);				// LD2 ON
 8000424:	2201      	movs	r2, #1
 8000426:	2120      	movs	r1, #32
 8000428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042c:	f000 fe3c 	bl	80010a8 <HAL_GPIO_WritePin>
	  		  HAL_ResumeTick();														// Resume Systick timer
 8000430:	f000 fb6e 	bl	8000b10 <HAL_ResumeTick>
	  		  HAL_Delay(1000);														// Wait 1000ms
 8000434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000438:	f000 fb36 	bl	8000aa8 <HAL_Delay>
	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);			// LD2 OFF
 800043c:	2200      	movs	r2, #0
 800043e:	2120      	movs	r1, #32
 8000440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000444:	f000 fe30 	bl	80010a8 <HAL_GPIO_WritePin>
	  		  break;
 8000448:	e05e      	b.n	8000508 <main+0x294>
	  	  case 7: // stop2
	  		  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);								// Disable Wakeup Timer
 800044a:	4831      	ldr	r0, [pc, #196]	; (8000510 <main+0x29c>)
 800044c:	f002 fc56 	bl	8002cfc <HAL_RTCEx_DeactivateWakeUpTimer>
	  		  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,10,RTC_WAKEUPCLOCK_CK_SPRE_16BITS);	// Set wake up timer with intterupt RTC
 8000450:	2204      	movs	r2, #4
 8000452:	210a      	movs	r1, #10
 8000454:	482e      	ldr	r0, [pc, #184]	; (8000510 <main+0x29c>)
 8000456:	f002 fbbd 	bl	8002bd4 <HAL_RTCEx_SetWakeUpTimer_IT>
	  		  HAL_SuspendTick();													// Stop Systick timer
 800045a:	f000 fb49 	bl	8000af0 <HAL_SuspendTick>

	  		  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFE);							// Enter Stop2 Mode, Wake Up Event
 800045e:	2002      	movs	r0, #2
 8000460:	f000 ffcc 	bl	80013fc <HAL_PWREx_EnterSTOP2Mode>
	  		  HAL_PWREx_DisableLowPowerRunMode();									// Disable Low Power Run
 8000464:	f000 ff3c 	bl	80012e0 <HAL_PWREx_DisableLowPowerRunMode>
	  		  SystemClock_Config();													// Use Sysmtem Clock HSI
 8000468:	f000 f856 	bl	8000518 <SystemClock_Config>

	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);				// LD2 ON
 800046c:	2201      	movs	r2, #1
 800046e:	2120      	movs	r1, #32
 8000470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000474:	f000 fe18 	bl	80010a8 <HAL_GPIO_WritePin>
	  		  HAL_ResumeTick();														// Resume Systick timer
 8000478:	f000 fb4a 	bl	8000b10 <HAL_ResumeTick>
	  		  HAL_Delay(1000);														// Wait 1000ms
 800047c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000480:	f000 fb12 	bl	8000aa8 <HAL_Delay>
	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);			// LD2 OFF
 8000484:	2200      	movs	r2, #0
 8000486:	2120      	movs	r1, #32
 8000488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048c:	f000 fe0c 	bl	80010a8 <HAL_GPIO_WritePin>
	  		  break;
 8000490:	e03a      	b.n	8000508 <main+0x294>
	  	  case 8:	// Stanby Mode
	  		  // Check if the SB flag is set
	  		  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000492:	4b20      	ldr	r3, [pc, #128]	; (8000514 <main+0x2a0>)
 8000494:	691b      	ldr	r3, [r3, #16]
 8000496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800049a:	2b00      	cmp	r3, #0
 800049c:	d01a      	beq.n	80004d4 <main+0x260>
	  		  {
	  			  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);								// Clear Stanby Flag
 800049e:	4b1d      	ldr	r3, [pc, #116]	; (8000514 <main+0x2a0>)
 80004a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004a4:	619a      	str	r2, [r3, #24]

	  			  for(int i = 0; i < 5;i++)
 80004a6:	2300      	movs	r3, #0
 80004a8:	607b      	str	r3, [r7, #4]
 80004aa:	e00a      	b.n	80004c2 <main+0x24e>
	  			  {
	  				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);					// Toggle LD2
 80004ac:	2120      	movs	r1, #32
 80004ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b2:	f000 fe11 	bl	80010d8 <HAL_GPIO_TogglePin>
	  				  HAL_Delay(100);												// Wait 100ms
 80004b6:	2064      	movs	r0, #100	; 0x64
 80004b8:	f000 faf6 	bl	8000aa8 <HAL_Delay>
	  			  for(int i = 0; i < 5;i++)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	3301      	adds	r3, #1
 80004c0:	607b      	str	r3, [r7, #4]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2b04      	cmp	r3, #4
 80004c6:	ddf1      	ble.n	80004ac <main+0x238>
	  			  }
	  			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);		// LD2 OFF
 80004c8:	2200      	movs	r2, #0
 80004ca:	2120      	movs	r1, #32
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d0:	f000 fdea 	bl	80010a8 <HAL_GPIO_WritePin>
	  		  }

	  		  while (1)
	  		  {
	  			  HAL_SuspendTick();												// Stop Systick timer
 80004d4:	f000 fb0c 	bl	8000af0 <HAL_SuspendTick>
	  			  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);							// RTC timer wake up timer stop
 80004d8:	480d      	ldr	r0, [pc, #52]	; (8000510 <main+0x29c>)
 80004da:	f002 fc0f 	bl	8002cfc <HAL_RTCEx_DeactivateWakeUpTimer>
	  			  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,10,RTC_WAKEUPCLOCK_CK_SPRE_16BITS);	// Set wake up timer with intterupt RTC
 80004de:	2204      	movs	r2, #4
 80004e0:	210a      	movs	r1, #10
 80004e2:	480b      	ldr	r0, [pc, #44]	; (8000510 <main+0x29c>)
 80004e4:	f002 fb76 	bl	8002bd4 <HAL_RTCEx_SetWakeUpTimer_IT>
	  			  HAL_PWR_EnterSTANDBYMode();												// Enter Stanby Mode
 80004e8:	f000 fe6c 	bl	80011c4 <HAL_PWR_EnterSTANDBYMode>
	  			  HAL_SuspendTick();												// Stop Systick timer
 80004ec:	e7f2      	b.n	80004d4 <main+0x260>
	  		  }
	  	  case 9: // Shutdown
	  		  while (1)
	  		  {
	  			  HAL_SuspendTick();												// Stop Systick timer
 80004ee:	f000 faff 	bl	8000af0 <HAL_SuspendTick>
	  			  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);							// RTC timer wake up timer stop
 80004f2:	4807      	ldr	r0, [pc, #28]	; (8000510 <main+0x29c>)
 80004f4:	f002 fc02 	bl	8002cfc <HAL_RTCEx_DeactivateWakeUpTimer>
	  			  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,10,RTC_WAKEUPCLOCK_CK_SPRE_16BITS);	// Set wake up timer with intterupt RTC
 80004f8:	2204      	movs	r2, #4
 80004fa:	210a      	movs	r1, #10
 80004fc:	4804      	ldr	r0, [pc, #16]	; (8000510 <main+0x29c>)
 80004fe:	f002 fb69 	bl	8002bd4 <HAL_RTCEx_SetWakeUpTimer_IT>
	  			  HAL_PWREx_EnterSHUTDOWNMode();									// Enter Shutdown Mode
 8000502:	f000 ffa7 	bl	8001454 <HAL_PWREx_EnterSHUTDOWNMode>
	  			  HAL_SuspendTick();												// Stop Systick timer
 8000506:	e7f2      	b.n	80004ee <main+0x27a>
	  switch(mode)
 8000508:	e6c9      	b.n	800029e <main+0x2a>
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000
 8000510:	2000002c 	.word	0x2000002c
 8000514:	40007000 	.word	0x40007000

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b096      	sub	sp, #88	; 0x58
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2244      	movs	r2, #68	; 0x44
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f003 f94c 	bl	80037c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	463b      	mov	r3, r7
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800053e:	f000 fe69 	bl	8001214 <HAL_PWREx_ControlVoltageScaling>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000548:	f000 f8ba 	bl	80006c0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800054c:	f000 fdde 	bl	800110c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <SystemClock_Config+0xbc>)
 8000552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000556:	4a1f      	ldr	r2, [pc, #124]	; (80005d4 <SystemClock_Config+0xbc>)
 8000558:	f023 0318 	bic.w	r3, r3, #24
 800055c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000560:	2306      	movs	r3, #6
 8000562:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056e:	2310      	movs	r3, #16
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000576:	2302      	movs	r3, #2
 8000578:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800057a:	2301      	movs	r3, #1
 800057c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800057e:	230a      	movs	r3, #10
 8000580:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000582:	2307      	movs	r3, #7
 8000584:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4618      	mov	r0, r3
 8000594:	f000 ff78 	bl	8001488 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800059e:	f000 f88f 	bl	80006c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2303      	movs	r3, #3
 80005a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	2104      	movs	r1, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fb40 	bl	8001c40 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005c6:	f000 f87b 	bl	80006c0 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3758      	adds	r7, #88	; 0x58
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000

080005d8 <SystemClock_Config_UseMSI>:
/**
  * @brief System Clock Configuration Use MSI
  * @retval None
  */
void SystemClock_Config_UseMSI(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b096      	sub	sp, #88	; 0x58
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2244      	movs	r2, #68	; 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 f8ec 	bl	80037c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fe:	f000 fe09 	bl	8001214 <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config_UseMSI+0x34>
  {
    Error_Handler();
 8000608:	f000 f85a 	bl	80006c0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800060c:	f000 fd7e 	bl	800110c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <SystemClock_Config_UseMSI+0xac>)
 8000612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000616:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <SystemClock_Config_UseMSI+0xac>)
 8000618:	f023 0318 	bic.w	r3, r3, #24
 800061c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000620:	231c      	movs	r3, #28
 8000622:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000634:	2350      	movs	r3, #80	; 0x50
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000638:	2300      	movs	r3, #0
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4618      	mov	r0, r3
 8000642:	f000 ff21 	bl	8001488 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config_UseMSI+0x78>
  {
    Error_Handler();
 800064c:	f000 f838 	bl	80006c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fae9 	bl	8001c40 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config_UseMSI+0xa0>
  {
    Error_Handler();
 8000674:	f000 f824 	bl	80006c0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000678:	f001 ffb8 	bl	80025ec <HAL_RCCEx_EnableMSIPLLMode>
}
 800067c:	bf00      	nop
 800067e:	3758      	adds	r7, #88	; 0x58
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_TIM_PeriodElapsedCallback>:
  * @brief TIM Period Elapsed Callback
  * @param  htim: call back tim
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    if (htim == &htim2)																// timer "htim2" ?
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d10b      	bne.n	80006b0 <HAL_TIM_PeriodElapsedCallback+0x28>
    {
    	if(timerCounter > 0)														// Check the number of timer counters remaining
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <HAL_TIM_PeriodElapsedCallback+0x34>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d007      	beq.n	80006b0 <HAL_TIM_PeriodElapsedCallback+0x28>
    	{
    		timerCounter--;															// timer counter -1
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80006a8:	6013      	str	r3, [r2, #0]
    		HAL_TIM_Base_Start_IT(&htim2);											// Start TIM2
 80006aa:	4803      	ldr	r0, [pc, #12]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80006ac:	f002 fc0c 	bl	8002ec8 <HAL_TIM_Base_Start_IT>
    	}
    }
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000050 	.word	0x20000050
 80006bc:	20000028 	.word	0x20000028

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>
	...

080006cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_RTC_Init+0x48>)
 80006d2:	4a11      	ldr	r2, [pc, #68]	; (8000718 <MX_RTC_Init+0x4c>)
 80006d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_RTC_Init+0x48>)
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_RTC_Init+0x48>)
 80006de:	227f      	movs	r2, #127	; 0x7f
 80006e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_RTC_Init+0x48>)
 80006e4:	22ff      	movs	r2, #255	; 0xff
 80006e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_RTC_Init+0x48>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_RTC_Init+0x48>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_RTC_Init+0x48>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_RTC_Init+0x48>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_RTC_Init+0x48>)
 8000702:	f002 f955 	bl	80029b0 <HAL_RTC_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800070c:	f7ff ffd8 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000002c 	.word	0x2000002c
 8000718:	40002800 	.word	0x40002800

0800071c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b0a4      	sub	sp, #144	; 0x90
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2288      	movs	r2, #136	; 0x88
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f003 f849 	bl	80037c4 <memset>
  if(rtcHandle->Instance==RTC)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <HAL_RTC_MspInit+0x6c>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d120      	bne.n	800077e <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800073c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000740:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	4618      	mov	r0, r3
 8000750:	f001 fc62 	bl	8002018 <HAL_RCCEx_PeriphCLKConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800075a:	f7ff ffb1 	bl	80006c0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <HAL_RTC_MspInit+0x70>)
 8000760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000764:	4a09      	ldr	r2, [pc, #36]	; (800078c <HAL_RTC_MspInit+0x70>)
 8000766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800076a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	2003      	movs	r0, #3
 8000774:	f000 fab7 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 fad0 	bl	8000d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800077e:	bf00      	nop
 8000780:	3790      	adds	r7, #144	; 0x90
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40002800 	.word	0x40002800
 800078c:	40021000 	.word	0x40021000

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x44>)
 8000798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <HAL_MspInit+0x44>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6613      	str	r3, [r2, #96]	; 0x60
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_MspInit+0x44>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_MspInit+0x44>)
 80007b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <HAL_MspInit+0x44>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_MspInit+0x44>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler+0x4>

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <MemManage_Handler+0x4>

080007ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000824:	f000 f920 	bl	8000a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <RTC_WKUP_IRQHandler+0x10>)
 8000832:	f002 fac1 	bl	8002db8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000002c 	.word	0x2000002c

08000840 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <TIM2_IRQHandler+0x10>)
 8000846:	f002 fbaf 	bl	8002fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000050 	.word	0x20000050

08000854 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SystemInit+0x20>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <SystemInit+0x20>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_TIM2_Init+0x98>)
 8000898:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800089c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_TIM2_Init+0x98>)
 80008a0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80008a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_TIM2_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_TIM2_Init+0x98>)
 80008ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80008b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_TIM2_Init+0x98>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_TIM2_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c0:	4813      	ldr	r0, [pc, #76]	; (8000910 <MX_TIM2_Init+0x98>)
 80008c2:	f002 faa9 	bl	8002e18 <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80008cc:	f7ff fef8 	bl	80006c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d6:	f107 0310 	add.w	r3, r7, #16
 80008da:	4619      	mov	r1, r3
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <MX_TIM2_Init+0x98>)
 80008de:	f002 fc82 	bl	80031e6 <HAL_TIM_ConfigClockSource>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80008e8:	f7ff feea 	bl	80006c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ec:	2300      	movs	r3, #0
 80008ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_TIM2_Init+0x98>)
 80008fa:	f002 fe99 	bl	8003630 <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000904:	f7ff fedc 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000050 	.word	0x20000050

08000914 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000924:	d113      	bne.n	800094e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_TIM_Base_MspInit+0x44>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <HAL_TIM_Base_MspInit+0x44>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6593      	str	r3, [r2, #88]	; 0x58
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_TIM_Base_MspInit+0x44>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	201c      	movs	r0, #28
 8000944:	f000 f9cf 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000948:	201c      	movs	r0, #28
 800094a:	f000 f9e8 	bl	8000d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800095c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000994 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000960:	f7ff ff78 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <LoopForever+0x6>)
  ldr r1, =_edata
 8000966:	490d      	ldr	r1, [pc, #52]	; (800099c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000968:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <LoopForever+0xe>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800097c:	4c0a      	ldr	r4, [pc, #40]	; (80009a8 <LoopForever+0x16>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098a:	f002 fef7 	bl	800377c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800098e:	f7ff fc71 	bl	8000274 <main>

08000992 <LoopForever>:

LoopForever:
    b LoopForever
 8000992:	e7fe      	b.n	8000992 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000994:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a0:	08003834 	.word	0x08003834
  ldr r2, =_sbss
 80009a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a8:	200000a0 	.word	0x200000a0

080009ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <ADC1_2_IRQHandler>
	...

080009b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <HAL_Init+0x3c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <HAL_Init+0x3c>)
 80009c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c6:	2003      	movs	r0, #3
 80009c8:	f000 f982 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009cc:	2000      	movs	r0, #0
 80009ce:	f000 f80f 	bl	80009f0 <HAL_InitTick>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	e001      	b.n	80009e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009de:	f7ff fed7 	bl	8000790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009e2:	79fb      	ldrb	r3, [r7, #7]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40022000 	.word	0x40022000

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_InitTick+0x6c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d023      	beq.n	8000a4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <HAL_InitTick+0x70>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_InitTick+0x6c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f98d 	bl	8000d3a <HAL_SYSTICK_Config>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10f      	bne.n	8000a46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d809      	bhi.n	8000a40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f000 f957 	bl	8000ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_InitTick+0x74>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
 8000a3e:	e007      	b.n	8000a50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	e004      	b.n	8000a50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	73fb      	strb	r3, [r7, #15]
 8000a4a:	e001      	b.n	8000a50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000004 	.word	0x20000004

08000a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_IncTick+0x20>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_IncTick+0x24>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_IncTick+0x24>)
 8000a7a:	6013      	str	r3, [r2, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	2000009c 	.word	0x2000009c

08000a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return uwTick;
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <HAL_GetTick+0x14>)
 8000a96:	681b      	ldr	r3, [r3, #0]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	2000009c 	.word	0x2000009c

08000aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab0:	f7ff ffee 	bl	8000a90 <HAL_GetTick>
 8000ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac0:	d005      	beq.n	8000ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <HAL_Delay+0x44>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ace:	bf00      	nop
 8000ad0:	f7ff ffde 	bl	8000a90 <HAL_GetTick>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d8f7      	bhi.n	8000ad0 <HAL_Delay+0x28>
  {
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000008 	.word	0x20000008

08000af0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_SuspendTick+0x1c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_SuspendTick+0x1c>)
 8000afa:	f023 0302 	bic.w	r3, r3, #2
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000e010 	.word	0xe000e010

08000b10 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_ResumeTick+0x1c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_ResumeTick+0x1c>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	60d3      	str	r3, [r2, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db0b      	blt.n	8000bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 021f 	and.w	r2, r3, #31
 8000bac:	4907      	ldr	r1, [pc, #28]	; (8000bcc <__NVIC_EnableIRQ+0x38>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff8e 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff29 	bl	8000b30 <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff3e 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff8e 	bl	8000c24 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5d 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff31 	bl	8000b94 <__NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffa2 	bl	8000c8c <SysTick_Config>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b087      	sub	sp, #28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d62:	e17f      	b.n	8001064 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	2101      	movs	r1, #1
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 8171 	beq.w	800105e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d005      	beq.n	8000d94 <HAL_GPIO_Init+0x40>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d130      	bne.n	8000df6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dca:	2201      	movs	r2, #1
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	091b      	lsrs	r3, r3, #4
 8000de0:	f003 0201 	and.w	r2, r3, #1
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d118      	bne.n	8000e34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	08db      	lsrs	r3, r3, #3
 8000e1e:	f003 0201 	and.w	r2, r3, #1
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d017      	beq.n	8000e70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d123      	bne.n	8000ec4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	08da      	lsrs	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3208      	adds	r2, #8
 8000e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	220f      	movs	r2, #15
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	691a      	ldr	r2, [r3, #16]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	6939      	ldr	r1, [r7, #16]
 8000ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0203 	and.w	r2, r3, #3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 80ac 	beq.w	800105e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	4b5f      	ldr	r3, [pc, #380]	; (8001084 <HAL_GPIO_Init+0x330>)
 8000f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0a:	4a5e      	ldr	r2, [pc, #376]	; (8001084 <HAL_GPIO_Init+0x330>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6613      	str	r3, [r2, #96]	; 0x60
 8000f12:	4b5c      	ldr	r3, [pc, #368]	; (8001084 <HAL_GPIO_Init+0x330>)
 8000f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f1e:	4a5a      	ldr	r2, [pc, #360]	; (8001088 <HAL_GPIO_Init+0x334>)
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	220f      	movs	r2, #15
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f48:	d025      	beq.n	8000f96 <HAL_GPIO_Init+0x242>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4f      	ldr	r2, [pc, #316]	; (800108c <HAL_GPIO_Init+0x338>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d01f      	beq.n	8000f92 <HAL_GPIO_Init+0x23e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4e      	ldr	r2, [pc, #312]	; (8001090 <HAL_GPIO_Init+0x33c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d019      	beq.n	8000f8e <HAL_GPIO_Init+0x23a>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4d      	ldr	r2, [pc, #308]	; (8001094 <HAL_GPIO_Init+0x340>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0x236>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4c      	ldr	r2, [pc, #304]	; (8001098 <HAL_GPIO_Init+0x344>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d00d      	beq.n	8000f86 <HAL_GPIO_Init+0x232>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4b      	ldr	r2, [pc, #300]	; (800109c <HAL_GPIO_Init+0x348>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0x22e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4a      	ldr	r2, [pc, #296]	; (80010a0 <HAL_GPIO_Init+0x34c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_GPIO_Init+0x22a>
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	e00c      	b.n	8000f98 <HAL_GPIO_Init+0x244>
 8000f7e:	2307      	movs	r3, #7
 8000f80:	e00a      	b.n	8000f98 <HAL_GPIO_Init+0x244>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e008      	b.n	8000f98 <HAL_GPIO_Init+0x244>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x244>
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e004      	b.n	8000f98 <HAL_GPIO_Init+0x244>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_Init+0x244>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <HAL_GPIO_Init+0x244>
 8000f96:	2300      	movs	r3, #0
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	f002 0203 	and.w	r2, r2, #3
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa8:	4937      	ldr	r1, [pc, #220]	; (8001088 <HAL_GPIO_Init+0x334>)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <HAL_GPIO_Init+0x350>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fda:	4a32      	ldr	r2, [pc, #200]	; (80010a4 <HAL_GPIO_Init+0x350>)
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fe0:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <HAL_GPIO_Init+0x350>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001004:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <HAL_GPIO_Init+0x350>)
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <HAL_GPIO_Init+0x350>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800102e:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_GPIO_Init+0x350>)
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_GPIO_Init+0x350>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <HAL_GPIO_Init+0x350>)
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa22 f303 	lsr.w	r3, r2, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	f47f ae78 	bne.w	8000d64 <HAL_GPIO_Init+0x10>
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	371c      	adds	r7, #28
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000
 8001088:	40010000 	.word	0x40010000
 800108c:	48000400 	.word	0x48000400
 8001090:	48000800 	.word	0x48000800
 8001094:	48000c00 	.word	0x48000c00
 8001098:	48001000 	.word	0x48001000
 800109c:	48001400 	.word	0x48001400
 80010a0:	48001800 	.word	0x48001800
 80010a4:	40010400 	.word	0x40010400

080010a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
 80010b4:	4613      	mov	r3, r2
 80010b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b8:	787b      	ldrb	r3, [r7, #1]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4013      	ands	r3, r2
 80010f0:	041a      	lsls	r2, r3, #16
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	43d9      	mvns	r1, r3
 80010f6:	887b      	ldrh	r3, [r7, #2]
 80010f8:	400b      	ands	r3, r1
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	619a      	str	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40007000 	.word	0x40007000

0800112c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10c      	bne.n	8001158 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_PWR_EnterSLEEPMode+0x60>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800114a:	d10e      	bne.n	800116a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800114c:	f000 f8c8 	bl	80012e0 <HAL_PWREx_DisableLowPowerRunMode>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d009      	beq.n	800116a <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8001156:	e016      	b.n	8001186 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_PWR_EnterSLEEPMode+0x60>)
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001164:	d001      	beq.n	800116a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8001166:	f000 f8ab 	bl	80012c0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_PWR_EnterSLEEPMode+0x64>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001170:	f023 0304 	bic.w	r3, r3, #4
 8001174:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800117c:	bf30      	wfi
 800117e:	e002      	b.n	8001186 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001180:	bf40      	sev
    __WFE();
 8001182:	bf20      	wfe
    __WFE();
 8001184:	bf20      	wfe
  }

}
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40007000 	.word	0x40007000
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011a6:	d104      	bne.n	80011b2 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f8fa 	bl	80013a4 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80011b0:	e003      	b.n	80011ba <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f8cb 	bl	8001350 <HAL_PWREx_EnterSTOP0Mode>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 0307 	bic.w	r3, r3, #7
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80011d2:	f043 0303 	orr.w	r3, r3, #3
 80011d6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80011e4:	bf30      	wfi
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40007000 	.word	0x40007000
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <HAL_PWREx_GetVoltageRange+0x18>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40007000 	.word	0x40007000

08001214 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001222:	d130      	bne.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001224:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800122c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001230:	d038      	beq.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800123a:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001240:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2232      	movs	r2, #50	; 0x32
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0c9b      	lsrs	r3, r3, #18
 8001254:	3301      	adds	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001258:	e002      	b.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3b01      	subs	r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800126c:	d102      	bne.n	8001274 <HAL_PWREx_ControlVoltageScaling+0x60>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f2      	bne.n	800125a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800127c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001280:	d110      	bne.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e00f      	b.n	80012a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800128e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001292:	d007      	beq.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800129c:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40007000 	.word	0x40007000
 80012b8:	20000000 	.word	0x20000000
 80012bc:	431bde83 	.word	0x431bde83

080012c0 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80012ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40007000 	.word	0x40007000

080012e0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a16      	ldr	r2, [pc, #88]	; (8001344 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80012ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012f0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2232      	movs	r2, #50	; 0x32
 80012f8:	fb02 f303 	mul.w	r3, r2, r3
 80012fc:	4a13      	ldr	r2, [pc, #76]	; (800134c <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	0c9b      	lsrs	r3, r3, #18
 8001304:	3301      	adds	r3, #1
 8001306:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001308:	e002      	b.n	8001310 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3b01      	subs	r3, #1
 800130e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800131c:	d102      	bne.n	8001324 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f2      	bne.n	800130a <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800132c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001330:	d101      	bne.n	8001336 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e000      	b.n	8001338 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40007000 	.word	0x40007000
 8001348:	20000000 	.word	0x20000000
 800134c:	431bde83 	.word	0x431bde83

08001350 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a0f      	ldr	r2, [pc, #60]	; (800139c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001360:	f023 0307 	bic.w	r3, r3, #7
 8001364:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d101      	bne.n	800137c <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001378:	bf30      	wfi
 800137a:	e002      	b.n	8001382 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800137c:	bf40      	sev
    __WFE();
 800137e:	bf20      	wfe
    __WFE();
 8001380:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001388:	f023 0304 	bic.w	r3, r3, #4
 800138c:	6113      	str	r3, [r2, #16]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40007000 	.word	0x40007000
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 0307 	bic.w	r3, r3, #7
 80013b6:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80013d0:	bf30      	wfi
 80013d2:	e002      	b.n	80013da <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80013d4:	bf40      	sev
    __WFE();
 80013d6:	bf20      	wfe
    __WFE();
 80013d8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80013e0:	f023 0304 	bic.w	r3, r3, #4
 80013e4:	6113      	str	r3, [r2, #16]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40007000 	.word	0x40007000
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 0307 	bic.w	r3, r3, #7
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001428:	bf30      	wfi
 800142a:	e002      	b.n	8001432 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800142c:	bf40      	sev
    __WFE();
 800142e:	bf20      	wfe
    __WFE();
 8001430:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001438:	f023 0304 	bic.w	r3, r3, #4
 800143c:	6113      	str	r3, [r2, #16]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40007000 	.word	0x40007000
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 0307 	bic.w	r3, r3, #7
 8001460:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	4a05      	ldr	r2, [pc, #20]	; (8001484 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001474:	bf30      	wfi
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40007000 	.word	0x40007000
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e3ca      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800149a:	4b97      	ldr	r3, [pc, #604]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014a4:	4b94      	ldr	r3, [pc, #592]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 80e4 	beq.w	8001684 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <HAL_RCC_OscConfig+0x4a>
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	f040 808b 	bne.w	80015e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	f040 8087 	bne.w	80015e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014d2:	4b89      	ldr	r3, [pc, #548]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d005      	beq.n	80014ea <HAL_RCC_OscConfig+0x62>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e3a2      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1a      	ldr	r2, [r3, #32]
 80014ee:	4b82      	ldr	r3, [pc, #520]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d004      	beq.n	8001504 <HAL_RCC_OscConfig+0x7c>
 80014fa:	4b7f      	ldr	r3, [pc, #508]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001502:	e005      	b.n	8001510 <HAL_RCC_OscConfig+0x88>
 8001504:	4b7c      	ldr	r3, [pc, #496]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001510:	4293      	cmp	r3, r2
 8001512:	d223      	bcs.n	800155c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4618      	mov	r0, r3
 800151a:	f000 fd1d 	bl	8001f58 <RCC_SetFlashLatencyFromMSIRange>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e383      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001528:	4b73      	ldr	r3, [pc, #460]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a72      	ldr	r2, [pc, #456]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b70      	ldr	r3, [pc, #448]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	496d      	ldr	r1, [pc, #436]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001546:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	4968      	ldr	r1, [pc, #416]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
 800155a:	e025      	b.n	80015a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800155c:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a65      	ldr	r2, [pc, #404]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001562:	f043 0308 	orr.w	r3, r3, #8
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b63      	ldr	r3, [pc, #396]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4960      	ldr	r1, [pc, #384]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800157a:	4b5f      	ldr	r3, [pc, #380]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	495b      	ldr	r1, [pc, #364]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 800158a:	4313      	orrs	r3, r2
 800158c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d109      	bne.n	80015a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fcdd 	bl	8001f58 <RCC_SetFlashLatencyFromMSIRange>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e343      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015a8:	f000 fc4a 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 80015ac:	4602      	mov	r2, r0
 80015ae:	4b52      	ldr	r3, [pc, #328]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	091b      	lsrs	r3, r3, #4
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	4950      	ldr	r1, [pc, #320]	; (80016fc <HAL_RCC_OscConfig+0x274>)
 80015ba:	5ccb      	ldrb	r3, [r1, r3]
 80015bc:	f003 031f 	and.w	r3, r3, #31
 80015c0:	fa22 f303 	lsr.w	r3, r2, r3
 80015c4:	4a4e      	ldr	r2, [pc, #312]	; (8001700 <HAL_RCC_OscConfig+0x278>)
 80015c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015c8:	4b4e      	ldr	r3, [pc, #312]	; (8001704 <HAL_RCC_OscConfig+0x27c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fa0f 	bl	80009f0 <HAL_InitTick>
 80015d2:	4603      	mov	r3, r0
 80015d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d052      	beq.n	8001682 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	e327      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d032      	beq.n	800164e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015e8:	4b43      	ldr	r3, [pc, #268]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a42      	ldr	r2, [pc, #264]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fa4c 	bl	8000a90 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015fc:	f7ff fa48 	bl	8000a90 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e310      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800160e:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800161a:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a36      	ldr	r2, [pc, #216]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4931      	ldr	r1, [pc, #196]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001634:	4313      	orrs	r3, r2
 8001636:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	492c      	ldr	r1, [pc, #176]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
 800164c:	e01a      	b.n	8001684 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a29      	ldr	r2, [pc, #164]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800165a:	f7ff fa19 	bl	8000a90 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001662:	f7ff fa15 	bl	8000a90 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e2dd      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f0      	bne.n	8001662 <HAL_RCC_OscConfig+0x1da>
 8001680:	e000      	b.n	8001684 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001682:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d074      	beq.n	800177a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2b08      	cmp	r3, #8
 8001694:	d005      	beq.n	80016a2 <HAL_RCC_OscConfig+0x21a>
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b0c      	cmp	r3, #12
 800169a:	d10e      	bne.n	80016ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d10b      	bne.n	80016ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d064      	beq.n	8001778 <HAL_RCC_OscConfig+0x2f0>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d160      	bne.n	8001778 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e2ba      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x24a>
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 80016ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	e026      	b.n	8001720 <HAL_RCC_OscConfig+0x298>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016da:	d115      	bne.n	8001708 <HAL_RCC_OscConfig+0x280>
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 80016e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a02      	ldr	r2, [pc, #8]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e014      	b.n	8001720 <HAL_RCC_OscConfig+0x298>
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	080037ec 	.word	0x080037ec
 8001700:	20000000 	.word	0x20000000
 8001704:	20000004 	.word	0x20000004
 8001708:	4ba0      	ldr	r3, [pc, #640]	; (800198c <HAL_RCC_OscConfig+0x504>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a9f      	ldr	r2, [pc, #636]	; (800198c <HAL_RCC_OscConfig+0x504>)
 800170e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b9d      	ldr	r3, [pc, #628]	; (800198c <HAL_RCC_OscConfig+0x504>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a9c      	ldr	r2, [pc, #624]	; (800198c <HAL_RCC_OscConfig+0x504>)
 800171a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d013      	beq.n	8001750 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff f9b2 	bl	8000a90 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff f9ae 	bl	8000a90 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e276      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001742:	4b92      	ldr	r3, [pc, #584]	; (800198c <HAL_RCC_OscConfig+0x504>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x2a8>
 800174e:	e014      	b.n	800177a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff f99e 	bl	8000a90 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff f99a 	bl	8000a90 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e262      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800176a:	4b88      	ldr	r3, [pc, #544]	; (800198c <HAL_RCC_OscConfig+0x504>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x2d0>
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d060      	beq.n	8001848 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d005      	beq.n	8001798 <HAL_RCC_OscConfig+0x310>
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d119      	bne.n	80017c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d116      	bne.n	80017c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001798:	4b7c      	ldr	r3, [pc, #496]	; (800198c <HAL_RCC_OscConfig+0x504>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_OscConfig+0x328>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e23f      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b0:	4b76      	ldr	r3, [pc, #472]	; (800198c <HAL_RCC_OscConfig+0x504>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	061b      	lsls	r3, r3, #24
 80017be:	4973      	ldr	r1, [pc, #460]	; (800198c <HAL_RCC_OscConfig+0x504>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c4:	e040      	b.n	8001848 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d023      	beq.n	8001816 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ce:	4b6f      	ldr	r3, [pc, #444]	; (800198c <HAL_RCC_OscConfig+0x504>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a6e      	ldr	r2, [pc, #440]	; (800198c <HAL_RCC_OscConfig+0x504>)
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7ff f959 	bl	8000a90 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e2:	f7ff f955 	bl	8000a90 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e21d      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f4:	4b65      	ldr	r3, [pc, #404]	; (800198c <HAL_RCC_OscConfig+0x504>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001800:	4b62      	ldr	r3, [pc, #392]	; (800198c <HAL_RCC_OscConfig+0x504>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	495f      	ldr	r1, [pc, #380]	; (800198c <HAL_RCC_OscConfig+0x504>)
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
 8001814:	e018      	b.n	8001848 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001816:	4b5d      	ldr	r3, [pc, #372]	; (800198c <HAL_RCC_OscConfig+0x504>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a5c      	ldr	r2, [pc, #368]	; (800198c <HAL_RCC_OscConfig+0x504>)
 800181c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001822:	f7ff f935 	bl	8000a90 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182a:	f7ff f931 	bl	8000a90 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e1f9      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800183c:	4b53      	ldr	r3, [pc, #332]	; (800198c <HAL_RCC_OscConfig+0x504>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f0      	bne.n	800182a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d03c      	beq.n	80018ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d01c      	beq.n	8001896 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800185c:	4b4b      	ldr	r3, [pc, #300]	; (800198c <HAL_RCC_OscConfig+0x504>)
 800185e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001862:	4a4a      	ldr	r2, [pc, #296]	; (800198c <HAL_RCC_OscConfig+0x504>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186c:	f7ff f910 	bl	8000a90 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001874:	f7ff f90c 	bl	8000a90 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e1d4      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001886:	4b41      	ldr	r3, [pc, #260]	; (800198c <HAL_RCC_OscConfig+0x504>)
 8001888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0ef      	beq.n	8001874 <HAL_RCC_OscConfig+0x3ec>
 8001894:	e01b      	b.n	80018ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001896:	4b3d      	ldr	r3, [pc, #244]	; (800198c <HAL_RCC_OscConfig+0x504>)
 8001898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189c:	4a3b      	ldr	r2, [pc, #236]	; (800198c <HAL_RCC_OscConfig+0x504>)
 800189e:	f023 0301 	bic.w	r3, r3, #1
 80018a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a6:	f7ff f8f3 	bl	8000a90 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ae:	f7ff f8ef 	bl	8000a90 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e1b7      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018c0:	4b32      	ldr	r3, [pc, #200]	; (800198c <HAL_RCC_OscConfig+0x504>)
 80018c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1ef      	bne.n	80018ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80a6 	beq.w	8001a28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018dc:	2300      	movs	r3, #0
 80018de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018e0:	4b2a      	ldr	r3, [pc, #168]	; (800198c <HAL_RCC_OscConfig+0x504>)
 80018e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10d      	bne.n	8001908 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <HAL_RCC_OscConfig+0x504>)
 80018ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f0:	4a26      	ldr	r2, [pc, #152]	; (800198c <HAL_RCC_OscConfig+0x504>)
 80018f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f6:	6593      	str	r3, [r2, #88]	; 0x58
 80018f8:	4b24      	ldr	r3, [pc, #144]	; (800198c <HAL_RCC_OscConfig+0x504>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001904:	2301      	movs	r3, #1
 8001906:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_RCC_OscConfig+0x508>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d118      	bne.n	8001946 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <HAL_RCC_OscConfig+0x508>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <HAL_RCC_OscConfig+0x508>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001920:	f7ff f8b6 	bl	8000a90 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001928:	f7ff f8b2 	bl	8000a90 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e17a      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_RCC_OscConfig+0x508>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d108      	bne.n	8001960 <HAL_RCC_OscConfig+0x4d8>
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <HAL_RCC_OscConfig+0x504>)
 8001950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001954:	4a0d      	ldr	r2, [pc, #52]	; (800198c <HAL_RCC_OscConfig+0x504>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800195e:	e029      	b.n	80019b4 <HAL_RCC_OscConfig+0x52c>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b05      	cmp	r3, #5
 8001966:	d115      	bne.n	8001994 <HAL_RCC_OscConfig+0x50c>
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_RCC_OscConfig+0x504>)
 800196a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196e:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_RCC_OscConfig+0x504>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <HAL_RCC_OscConfig+0x504>)
 800197a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197e:	4a03      	ldr	r2, [pc, #12]	; (800198c <HAL_RCC_OscConfig+0x504>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001988:	e014      	b.n	80019b4 <HAL_RCC_OscConfig+0x52c>
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000
 8001990:	40007000 	.word	0x40007000
 8001994:	4b9c      	ldr	r3, [pc, #624]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199a:	4a9b      	ldr	r2, [pc, #620]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019a4:	4b98      	ldr	r3, [pc, #608]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 80019a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019aa:	4a97      	ldr	r2, [pc, #604]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 80019ac:	f023 0304 	bic.w	r3, r3, #4
 80019b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d016      	beq.n	80019ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019bc:	f7ff f868 	bl	8000a90 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019c2:	e00a      	b.n	80019da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c4:	f7ff f864 	bl	8000a90 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e12a      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019da:	4b8b      	ldr	r3, [pc, #556]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 80019dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0ed      	beq.n	80019c4 <HAL_RCC_OscConfig+0x53c>
 80019e8:	e015      	b.n	8001a16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ea:	f7ff f851 	bl	8000a90 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7ff f84d 	bl	8000a90 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e113      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a08:	4b7f      	ldr	r3, [pc, #508]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1ed      	bne.n	80019f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a16:	7ffb      	ldrb	r3, [r7, #31]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d105      	bne.n	8001a28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1c:	4b7a      	ldr	r3, [pc, #488]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	4a79      	ldr	r2, [pc, #484]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80fe 	beq.w	8001c2e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	f040 80d0 	bne.w	8001bdc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a3c:	4b72      	ldr	r3, [pc, #456]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 0203 	and.w	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d130      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d127      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d11f      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a7c:	2a07      	cmp	r2, #7
 8001a7e:	bf14      	ite	ne
 8001a80:	2201      	movne	r2, #1
 8001a82:	2200      	moveq	r2, #0
 8001a84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d113      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a94:	085b      	lsrs	r3, r3, #1
 8001a96:	3b01      	subs	r3, #1
 8001a98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d109      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	085b      	lsrs	r3, r3, #1
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d06e      	beq.n	8001b90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b0c      	cmp	r3, #12
 8001ab6:	d069      	beq.n	8001b8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ab8:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d105      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ac4:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0ad      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ad4:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a4b      	ldr	r2, [pc, #300]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ade:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ae0:	f7fe ffd6 	bl	8000a90 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7fe ffd2 	bl	8000a90 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e09a      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001afa:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b06:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	4b40      	ldr	r3, [pc, #256]	; (8001c0c <HAL_RCC_OscConfig+0x784>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b16:	3a01      	subs	r2, #1
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	4311      	orrs	r1, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b20:	0212      	lsls	r2, r2, #8
 8001b22:	4311      	orrs	r1, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b28:	0852      	lsrs	r2, r2, #1
 8001b2a:	3a01      	subs	r2, #1
 8001b2c:	0552      	lsls	r2, r2, #21
 8001b2e:	4311      	orrs	r1, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b34:	0852      	lsrs	r2, r2, #1
 8001b36:	3a01      	subs	r2, #1
 8001b38:	0652      	lsls	r2, r2, #25
 8001b3a:	4311      	orrs	r1, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b40:	0912      	lsrs	r2, r2, #4
 8001b42:	0452      	lsls	r2, r2, #17
 8001b44:	430a      	orrs	r2, r1
 8001b46:	4930      	ldr	r1, [pc, #192]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b4c:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4a2a      	ldr	r2, [pc, #168]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b64:	f7fe ff94 	bl	8000a90 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7fe ff90 	bl	8000a90 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e058      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7e:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b8a:	e050      	b.n	8001c2e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e04f      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d148      	bne.n	8001c2e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bb4:	f7fe ff6c 	bl	8000a90 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7fe ff68 	bl	8000a90 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e030      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x734>
 8001bda:	e028      	b.n	8001c2e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2b0c      	cmp	r3, #12
 8001be0:	d023      	beq.n	8001c2a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <HAL_RCC_OscConfig+0x780>)
 8001be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bee:	f7fe ff4f 	bl	8000a90 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf4:	e00c      	b.n	8001c10 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7fe ff4b 	bl	8000a90 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d905      	bls.n	8001c10 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e013      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_OscConfig+0x7b0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1ec      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_RCC_OscConfig+0x7b0>)
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	4905      	ldr	r1, [pc, #20]	; (8001c38 <HAL_RCC_OscConfig+0x7b0>)
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_RCC_OscConfig+0x7b4>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	60cb      	str	r3, [r1, #12]
 8001c28:	e001      	b.n	8001c2e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	feeefffc 	.word	0xfeeefffc

08001c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0e7      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c54:	4b75      	ldr	r3, [pc, #468]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d910      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b72      	ldr	r3, [pc, #456]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 0207 	bic.w	r2, r3, #7
 8001c6a:	4970      	ldr	r1, [pc, #448]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b6e      	ldr	r3, [pc, #440]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0cf      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d010      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	4b66      	ldr	r3, [pc, #408]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d908      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca0:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4960      	ldr	r1, [pc, #384]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d04c      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc6:	4b5a      	ldr	r3, [pc, #360]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d121      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0a6      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cde:	4b54      	ldr	r3, [pc, #336]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d115      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e09a      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cf6:	4b4e      	ldr	r3, [pc, #312]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d109      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e08e      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d06:	4b4a      	ldr	r3, [pc, #296]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e086      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d16:	4b46      	ldr	r3, [pc, #280]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f023 0203 	bic.w	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4943      	ldr	r1, [pc, #268]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d28:	f7fe feb2 	bl	8000a90 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d30:	f7fe feae 	bl	8000a90 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e06e      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 020c 	and.w	r2, r3, #12
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d1eb      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d010      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d208      	bcs.n	8001d86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d74:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	492b      	ldr	r1, [pc, #172]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d86:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d210      	bcs.n	8001db6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 0207 	bic.w	r2, r3, #7
 8001d9c:	4923      	ldr	r1, [pc, #140]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <HAL_RCC_ClockConfig+0x1ec>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e036      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d008      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc2:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	4918      	ldr	r1, [pc, #96]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d009      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4910      	ldr	r1, [pc, #64]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001df4:	f000 f824 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	490b      	ldr	r1, [pc, #44]	; (8001e34 <HAL_RCC_ClockConfig+0x1f4>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001e12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_RCC_ClockConfig+0x1fc>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fde9 	bl	80009f0 <HAL_InitTick>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e22:	7afb      	ldrb	r3, [r7, #11]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40022000 	.word	0x40022000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	080037ec 	.word	0x080037ec
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	20000004 	.word	0x20000004

08001e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4e:	4b3e      	ldr	r3, [pc, #248]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e58:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x34>
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d121      	bne.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d11e      	bne.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e74:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e80:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e005      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e90:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e9c:	4a2b      	ldr	r2, [pc, #172]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10d      	bne.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d102      	bne.n	8001ebe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eb8:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eba:	61bb      	str	r3, [r7, #24]
 8001ebc:	e004      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ec6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	d134      	bne.n	8001f38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d003      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d003      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0xac>
 8001ee4:	e005      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ee8:	617b      	str	r3, [r7, #20]
      break;
 8001eea:	e005      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8001eee:	617b      	str	r3, [r7, #20]
      break;
 8001ef0:	e002      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	617b      	str	r3, [r7, #20]
      break;
 8001ef6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	3301      	adds	r3, #1
 8001f04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	fb03 f202 	mul.w	r2, r3, r2
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	0e5b      	lsrs	r3, r3, #25
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	3301      	adds	r3, #1
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f38:	69bb      	ldr	r3, [r7, #24]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	; 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	080037fc 	.word	0x080037fc
 8001f50:	00f42400 	.word	0x00f42400
 8001f54:	007a1200 	.word	0x007a1200

08001f58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f64:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f70:	f7ff f942 	bl	80011f8 <HAL_PWREx_GetVoltageRange>
 8001f74:	6178      	str	r0, [r7, #20]
 8001f76:	e014      	b.n	8001fa2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	4a24      	ldr	r2, [pc, #144]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f82:	6593      	str	r3, [r2, #88]	; 0x58
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f90:	f7ff f932 	bl	80011f8 <HAL_PWREx_GetVoltageRange>
 8001f94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa8:	d10b      	bne.n	8001fc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b80      	cmp	r3, #128	; 0x80
 8001fae:	d919      	bls.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2ba0      	cmp	r3, #160	; 0xa0
 8001fb4:	d902      	bls.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	e013      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	e010      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b80      	cmp	r3, #128	; 0x80
 8001fc6:	d902      	bls.n	8001fce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fc8:	2303      	movs	r3, #3
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	e00a      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b80      	cmp	r3, #128	; 0x80
 8001fd2:	d102      	bne.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	e004      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b70      	cmp	r3, #112	; 0x70
 8001fde:	d101      	bne.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 0207 	bic.w	r2, r3, #7
 8001fec:	4909      	ldr	r1, [pc, #36]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d001      	beq.n	8002006 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	40022000 	.word	0x40022000

08002018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002020:	2300      	movs	r3, #0
 8002022:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002024:	2300      	movs	r3, #0
 8002026:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002030:	2b00      	cmp	r3, #0
 8002032:	d041      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002038:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800203c:	d02a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800203e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002042:	d824      	bhi.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002044:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002048:	d008      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800204a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800204e:	d81e      	bhi.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002058:	d010      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800205a:	e018      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800205c:	4b86      	ldr	r3, [pc, #536]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a85      	ldr	r2, [pc, #532]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002066:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002068:	e015      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3304      	adds	r3, #4
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f000 facb 	bl	800260c <RCCEx_PLLSAI1_Config>
 8002076:	4603      	mov	r3, r0
 8002078:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800207a:	e00c      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3320      	adds	r3, #32
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fbb6 	bl	80027f4 <RCCEx_PLLSAI2_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800208c:	e003      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	74fb      	strb	r3, [r7, #19]
      break;
 8002092:	e000      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800209c:	4b76      	ldr	r3, [pc, #472]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020aa:	4973      	ldr	r1, [pc, #460]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020b2:	e001      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d041      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020cc:	d02a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020d2:	d824      	bhi.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020d8:	d008      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020de:	d81e      	bhi.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e8:	d010      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020ea:	e018      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020ec:	4b62      	ldr	r3, [pc, #392]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a61      	ldr	r2, [pc, #388]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020f8:	e015      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fa83 	bl	800260c <RCCEx_PLLSAI1_Config>
 8002106:	4603      	mov	r3, r0
 8002108:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800210a:	e00c      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3320      	adds	r3, #32
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fb6e 	bl	80027f4 <RCCEx_PLLSAI2_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800211c:	e003      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	74fb      	strb	r3, [r7, #19]
      break;
 8002122:	e000      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10b      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800212c:	4b52      	ldr	r3, [pc, #328]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800213a:	494f      	ldr	r1, [pc, #316]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002142:	e001      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80a0 	beq.w	8002296 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800216a:	2300      	movs	r3, #0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00d      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002170:	4b41      	ldr	r3, [pc, #260]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	4a40      	ldr	r2, [pc, #256]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217a:	6593      	str	r3, [r2, #88]	; 0x58
 800217c:	4b3e      	ldr	r3, [pc, #248]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002188:	2301      	movs	r3, #1
 800218a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800218c:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a3a      	ldr	r2, [pc, #232]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002196:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002198:	f7fe fc7a 	bl	8000a90 <HAL_GetTick>
 800219c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800219e:	e009      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a0:	f7fe fc76 	bl	8000a90 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d902      	bls.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	74fb      	strb	r3, [r7, #19]
        break;
 80021b2:	e005      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021b4:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ef      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d15c      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021c6:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01f      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d019      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021e4:	4b24      	ldr	r3, [pc, #144]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021f0:	4b21      	ldr	r3, [pc, #132]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	4a20      	ldr	r2, [pc, #128]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002206:	4a1c      	ldr	r2, [pc, #112]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002210:	4a19      	ldr	r2, [pc, #100]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d016      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7fe fc35 	bl	8000a90 <HAL_GetTick>
 8002226:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002228:	e00b      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222a:	f7fe fc31 	bl	8000a90 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f241 3288 	movw	r2, #5000	; 0x1388
 8002238:	4293      	cmp	r3, r2
 800223a:	d902      	bls.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	74fb      	strb	r3, [r7, #19]
            break;
 8002240:	e006      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ec      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10c      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002266:	4904      	ldr	r1, [pc, #16]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800226e:	e009      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	74bb      	strb	r3, [r7, #18]
 8002274:	e006      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002284:	7c7b      	ldrb	r3, [r7, #17]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d105      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228a:	4b9e      	ldr	r3, [pc, #632]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228e:	4a9d      	ldr	r2, [pc, #628]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002294:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022a2:	4b98      	ldr	r3, [pc, #608]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a8:	f023 0203 	bic.w	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b0:	4994      	ldr	r1, [pc, #592]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022c4:	4b8f      	ldr	r3, [pc, #572]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f023 020c 	bic.w	r2, r3, #12
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	498c      	ldr	r1, [pc, #560]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00a      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022e6:	4b87      	ldr	r3, [pc, #540]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	4983      	ldr	r1, [pc, #524]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00a      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002308:	4b7e      	ldr	r3, [pc, #504]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	497b      	ldr	r1, [pc, #492]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800232a:	4b76      	ldr	r3, [pc, #472]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002338:	4972      	ldr	r1, [pc, #456]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00a      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800234c:	4b6d      	ldr	r3, [pc, #436]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002352:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	496a      	ldr	r1, [pc, #424]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00a      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800236e:	4b65      	ldr	r3, [pc, #404]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002374:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237c:	4961      	ldr	r1, [pc, #388]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237e:	4313      	orrs	r3, r2
 8002380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002390:	4b5c      	ldr	r3, [pc, #368]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239e:	4959      	ldr	r1, [pc, #356]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00a      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023b2:	4b54      	ldr	r3, [pc, #336]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c0:	4950      	ldr	r1, [pc, #320]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00a      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023d4:	4b4b      	ldr	r3, [pc, #300]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	4948      	ldr	r1, [pc, #288]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023f6:	4b43      	ldr	r3, [pc, #268]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	493f      	ldr	r1, [pc, #252]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d028      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002418:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002426:	4937      	ldr	r1, [pc, #220]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002436:	d106      	bne.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002438:	4b32      	ldr	r3, [pc, #200]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4a31      	ldr	r2, [pc, #196]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002442:	60d3      	str	r3, [r2, #12]
 8002444:	e011      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800244a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800244e:	d10c      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	2101      	movs	r1, #1
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f8d8 	bl	800260c <RCCEx_PLLSAI1_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d028      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002476:	4b23      	ldr	r3, [pc, #140]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	491f      	ldr	r1, [pc, #124]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002494:	d106      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024a0:	60d3      	str	r3, [r2, #12]
 80024a2:	e011      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2101      	movs	r1, #1
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f8a9 	bl	800260c <RCCEx_PLLSAI1_Config>
 80024ba:	4603      	mov	r3, r0
 80024bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d02b      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e2:	4908      	ldr	r1, [pc, #32]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f2:	d109      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a02      	ldr	r2, [pc, #8]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024fe:	60d3      	str	r3, [r2, #12]
 8002500:	e014      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002510:	d10c      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3304      	adds	r3, #4
 8002516:	2101      	movs	r1, #1
 8002518:	4618      	mov	r0, r3
 800251a:	f000 f877 	bl	800260c <RCCEx_PLLSAI1_Config>
 800251e:	4603      	mov	r3, r0
 8002520:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002522:	7cfb      	ldrb	r3, [r7, #19]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d02f      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002538:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002546:	4928      	ldr	r1, [pc, #160]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002556:	d10d      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3304      	adds	r3, #4
 800255c:	2102      	movs	r1, #2
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f854 	bl	800260c <RCCEx_PLLSAI1_Config>
 8002564:	4603      	mov	r3, r0
 8002566:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002568:	7cfb      	ldrb	r3, [r7, #19]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d014      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800256e:	7cfb      	ldrb	r3, [r7, #19]
 8002570:	74bb      	strb	r3, [r7, #18]
 8002572:	e011      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800257c:	d10c      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3320      	adds	r3, #32
 8002582:	2102      	movs	r1, #2
 8002584:	4618      	mov	r0, r3
 8002586:	f000 f935 	bl	80027f4 <RCCEx_PLLSAI2_Config>
 800258a:	4603      	mov	r3, r0
 800258c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800258e:	7cfb      	ldrb	r3, [r7, #19]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00a      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025b2:	490d      	ldr	r1, [pc, #52]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025d6:	4904      	ldr	r1, [pc, #16]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025de:	7cbb      	ldrb	r3, [r7, #18]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40021000 	.word	0x40021000

080025ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a04      	ldr	r2, [pc, #16]	; (8002608 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80025f6:	f043 0304 	orr.w	r3, r3, #4
 80025fa:	6013      	str	r3, [r2, #0]
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000

0800260c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800261a:	4b75      	ldr	r3, [pc, #468]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d018      	beq.n	8002658 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002626:	4b72      	ldr	r3, [pc, #456]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f003 0203 	and.w	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d10d      	bne.n	8002652 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
       ||
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800263e:	4b6c      	ldr	r3, [pc, #432]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
       ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d047      	beq.n	80026e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
 8002656:	e044      	b.n	80026e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d018      	beq.n	8002692 <RCCEx_PLLSAI1_Config+0x86>
 8002660:	2b03      	cmp	r3, #3
 8002662:	d825      	bhi.n	80026b0 <RCCEx_PLLSAI1_Config+0xa4>
 8002664:	2b01      	cmp	r3, #1
 8002666:	d002      	beq.n	800266e <RCCEx_PLLSAI1_Config+0x62>
 8002668:	2b02      	cmp	r3, #2
 800266a:	d009      	beq.n	8002680 <RCCEx_PLLSAI1_Config+0x74>
 800266c:	e020      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800266e:	4b60      	ldr	r3, [pc, #384]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d11d      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800267e:	e01a      	b.n	80026b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002680:	4b5b      	ldr	r3, [pc, #364]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002688:	2b00      	cmp	r3, #0
 800268a:	d116      	bne.n	80026ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002690:	e013      	b.n	80026ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002692:	4b57      	ldr	r3, [pc, #348]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800269e:	4b54      	ldr	r3, [pc, #336]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026ae:	e006      	b.n	80026be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
      break;
 80026b4:	e004      	b.n	80026c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026b6:	bf00      	nop
 80026b8:	e002      	b.n	80026c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ba:	bf00      	nop
 80026bc:	e000      	b.n	80026c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026be:	bf00      	nop
    }

    if(status == HAL_OK)
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10d      	bne.n	80026e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026c6:	4b4a      	ldr	r3, [pc, #296]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	430b      	orrs	r3, r1
 80026dc:	4944      	ldr	r1, [pc, #272]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d17d      	bne.n	80027e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026e8:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a40      	ldr	r2, [pc, #256]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f4:	f7fe f9cc 	bl	8000a90 <HAL_GetTick>
 80026f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026fa:	e009      	b.n	8002710 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026fc:	f7fe f9c8 	bl	8000a90 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d902      	bls.n	8002710 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	73fb      	strb	r3, [r7, #15]
        break;
 800270e:	e005      	b.n	800271c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002710:	4b37      	ldr	r3, [pc, #220]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ef      	bne.n	80026fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d160      	bne.n	80027e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d111      	bne.n	800274c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002728:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6892      	ldr	r2, [r2, #8]
 8002738:	0211      	lsls	r1, r2, #8
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68d2      	ldr	r2, [r2, #12]
 800273e:	0912      	lsrs	r2, r2, #4
 8002740:	0452      	lsls	r2, r2, #17
 8002742:	430a      	orrs	r2, r1
 8002744:	492a      	ldr	r1, [pc, #168]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	610b      	str	r3, [r1, #16]
 800274a:	e027      	b.n	800279c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d112      	bne.n	8002778 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002752:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800275a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6892      	ldr	r2, [r2, #8]
 8002762:	0211      	lsls	r1, r2, #8
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6912      	ldr	r2, [r2, #16]
 8002768:	0852      	lsrs	r2, r2, #1
 800276a:	3a01      	subs	r2, #1
 800276c:	0552      	lsls	r2, r2, #21
 800276e:	430a      	orrs	r2, r1
 8002770:	491f      	ldr	r1, [pc, #124]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	610b      	str	r3, [r1, #16]
 8002776:	e011      	b.n	800279c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002780:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6892      	ldr	r2, [r2, #8]
 8002788:	0211      	lsls	r1, r2, #8
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6952      	ldr	r2, [r2, #20]
 800278e:	0852      	lsrs	r2, r2, #1
 8002790:	3a01      	subs	r2, #1
 8002792:	0652      	lsls	r2, r2, #25
 8002794:	430a      	orrs	r2, r1
 8002796:	4916      	ldr	r1, [pc, #88]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002798:	4313      	orrs	r3, r2
 800279a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe f972 	bl	8000a90 <HAL_GetTick>
 80027ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027ae:	e009      	b.n	80027c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027b0:	f7fe f96e 	bl	8000a90 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d902      	bls.n	80027c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	73fb      	strb	r3, [r7, #15]
          break;
 80027c2:	e005      	b.n	80027d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ef      	beq.n	80027b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	4904      	ldr	r1, [pc, #16]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000

080027f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002802:	4b6a      	ldr	r3, [pc, #424]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d018      	beq.n	8002840 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800280e:	4b67      	ldr	r3, [pc, #412]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f003 0203 	and.w	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d10d      	bne.n	800283a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
       ||
 8002822:	2b00      	cmp	r3, #0
 8002824:	d009      	beq.n	800283a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002826:	4b61      	ldr	r3, [pc, #388]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
       ||
 8002836:	429a      	cmp	r2, r3
 8002838:	d047      	beq.n	80028ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	e044      	b.n	80028ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d018      	beq.n	800287a <RCCEx_PLLSAI2_Config+0x86>
 8002848:	2b03      	cmp	r3, #3
 800284a:	d825      	bhi.n	8002898 <RCCEx_PLLSAI2_Config+0xa4>
 800284c:	2b01      	cmp	r3, #1
 800284e:	d002      	beq.n	8002856 <RCCEx_PLLSAI2_Config+0x62>
 8002850:	2b02      	cmp	r3, #2
 8002852:	d009      	beq.n	8002868 <RCCEx_PLLSAI2_Config+0x74>
 8002854:	e020      	b.n	8002898 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002856:	4b55      	ldr	r3, [pc, #340]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d11d      	bne.n	800289e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002866:	e01a      	b.n	800289e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002868:	4b50      	ldr	r3, [pc, #320]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002870:	2b00      	cmp	r3, #0
 8002872:	d116      	bne.n	80028a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002878:	e013      	b.n	80028a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800287a:	4b4c      	ldr	r3, [pc, #304]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10f      	bne.n	80028a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002886:	4b49      	ldr	r3, [pc, #292]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002896:	e006      	b.n	80028a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
      break;
 800289c:	e004      	b.n	80028a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800289e:	bf00      	nop
 80028a0:	e002      	b.n	80028a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028a2:	bf00      	nop
 80028a4:	e000      	b.n	80028a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10d      	bne.n	80028ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028ae:	4b3f      	ldr	r3, [pc, #252]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6819      	ldr	r1, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	430b      	orrs	r3, r1
 80028c4:	4939      	ldr	r1, [pc, #228]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d167      	bne.n	80029a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028d0:	4b36      	ldr	r3, [pc, #216]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a35      	ldr	r2, [pc, #212]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028dc:	f7fe f8d8 	bl	8000a90 <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028e2:	e009      	b.n	80028f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028e4:	f7fe f8d4 	bl	8000a90 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d902      	bls.n	80028f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	73fb      	strb	r3, [r7, #15]
        break;
 80028f6:	e005      	b.n	8002904 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028f8:	4b2c      	ldr	r3, [pc, #176]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1ef      	bne.n	80028e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d14a      	bne.n	80029a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d111      	bne.n	8002934 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002910:	4b26      	ldr	r3, [pc, #152]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6892      	ldr	r2, [r2, #8]
 8002920:	0211      	lsls	r1, r2, #8
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	68d2      	ldr	r2, [r2, #12]
 8002926:	0912      	lsrs	r2, r2, #4
 8002928:	0452      	lsls	r2, r2, #17
 800292a:	430a      	orrs	r2, r1
 800292c:	491f      	ldr	r1, [pc, #124]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800292e:	4313      	orrs	r3, r2
 8002930:	614b      	str	r3, [r1, #20]
 8002932:	e011      	b.n	8002958 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002934:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800293c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6892      	ldr	r2, [r2, #8]
 8002944:	0211      	lsls	r1, r2, #8
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6912      	ldr	r2, [r2, #16]
 800294a:	0852      	lsrs	r2, r2, #1
 800294c:	3a01      	subs	r2, #1
 800294e:	0652      	lsls	r2, r2, #25
 8002950:	430a      	orrs	r2, r1
 8002952:	4916      	ldr	r1, [pc, #88]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002954:	4313      	orrs	r3, r2
 8002956:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a13      	ldr	r2, [pc, #76]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800295e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002962:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe f894 	bl	8000a90 <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800296a:	e009      	b.n	8002980 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800296c:	f7fe f890 	bl	8000a90 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d902      	bls.n	8002980 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	73fb      	strb	r3, [r7, #15]
          break;
 800297e:	e005      	b.n	800298c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0ef      	beq.n	800296c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	4904      	ldr	r1, [pc, #16]	; (80029ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800299c:	4313      	orrs	r3, r2
 800299e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000

080029b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d06c      	beq.n	8002a9c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fd fea0 	bl	800071c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	22ca      	movs	r2, #202	; 0xca
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2253      	movs	r2, #83	; 0x53
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f87c 	bl	8002af2 <RTC_EnterInitMode>
 80029fa:	4603      	mov	r3, r0
 80029fc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d14b      	bne.n	8002a9c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a16:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6899      	ldr	r1, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68d2      	ldr	r2, [r2, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6919      	ldr	r1, [r3, #16]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	041a      	lsls	r2, r3, #16
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f87f 	bl	8002b58 <RTC_ExitInitMode>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d11b      	bne.n	8002a9c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0203 	bic.w	r2, r2, #3
 8002a72:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69da      	ldr	r2, [r3, #28]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	22ff      	movs	r2, #255	; 0xff
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002abc:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002abe:	f7fd ffe7 	bl	8000a90 <HAL_GetTick>
 8002ac2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ac4:	e009      	b.n	8002ada <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ac6:	f7fd ffe3 	bl	8000a90 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ad4:	d901      	bls.n	8002ada <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e007      	b.n	8002aea <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ee      	beq.n	8002ac6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d120      	bne.n	8002b4e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295
 8002b14:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002b16:	f7fd ffbb 	bl	8000a90 <HAL_GetTick>
 8002b1a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002b1c:	e00d      	b.n	8002b3a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002b1e:	f7fd ffb7 	bl	8000a90 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b2c:	d905      	bls.n	8002b3a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2203      	movs	r2, #3
 8002b36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <RTC_EnterInitMode+0x5c>
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d1e7      	bne.n	8002b1e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <RTC_ExitInitMode+0x78>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <RTC_ExitInitMode+0x78>)
 8002b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002b70:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <RTC_ExitInitMode+0x78>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10c      	bne.n	8002b96 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff ff92 	bl	8002aa6 <HAL_RTC_WaitForSynchro>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01e      	beq.n	8002bc6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	e017      	b.n	8002bc6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <RTC_ExitInitMode+0x78>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	4a0d      	ldr	r2, [pc, #52]	; (8002bd0 <RTC_ExitInitMode+0x78>)
 8002b9c:	f023 0320 	bic.w	r3, r3, #32
 8002ba0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff ff7f 	bl	8002aa6 <HAL_RTC_WaitForSynchro>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002bba:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <RTC_ExitInitMode+0x78>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <RTC_ExitInitMode+0x78>)
 8002bc0:	f043 0320 	orr.w	r3, r3, #32
 8002bc4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40002800 	.word	0x40002800

08002bd4 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e07f      	b.n	8002cee <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	22ca      	movs	r2, #202	; 0xca
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2253      	movs	r2, #83	; 0x53
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c1c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002c2e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d120      	bne.n	8002c80 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8002c3e:	f7fd ff27 	bl	8000a90 <HAL_GetTick>
 8002c42:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002c44:	e015      	b.n	8002c72 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c46:	f7fd ff23 	bl	8000a90 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c54:	d90d      	bls.n	8002c72 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	22ff      	movs	r2, #255	; 0xff
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2203      	movs	r2, #3
 8002c62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e03d      	b.n	8002cee <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0e2      	beq.n	8002c46 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f023 0107 	bic.w	r1, r3, #7
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a15      	ldr	r2, [pc, #84]	; (8002cf8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ca6:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb2:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cd2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	22ff      	movs	r2, #255	; 0xff
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40010400 	.word	0x40010400

08002cfc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e04d      	b.n	8002dae <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	22ca      	movs	r2, #202	; 0xca
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2253      	movs	r2, #83	; 0x53
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d40:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d50:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8002d52:	f7fd fe9d 	bl	8000a90 <HAL_GetTick>
 8002d56:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002d58:	e015      	b.n	8002d86 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d5a:	f7fd fe99 	bl	8000a90 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d68:	d90d      	bls.n	8002d86 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	22ff      	movs	r2, #255	; 0xff
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2203      	movs	r2, #3
 8002d76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e013      	b.n	8002dae <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0e2      	beq.n	8002d5a <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	22ff      	movs	r2, #255	; 0xff
 8002d9a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8002dc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002dc6:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002de6:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f80b 	bl	8002e04 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40010400 	.word	0x40010400

08002e04 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e049      	b.n	8002ebe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fd fd68 	bl	8000914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3304      	adds	r3, #4
 8002e54:	4619      	mov	r1, r3
 8002e56:	4610      	mov	r0, r2
 8002e58:	f000 fab6 	bl	80033c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d001      	beq.n	8002ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e04f      	b.n	8002f80 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a23      	ldr	r2, [pc, #140]	; (8002f8c <HAL_TIM_Base_Start_IT+0xc4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01d      	beq.n	8002f3e <HAL_TIM_Base_Start_IT+0x76>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0a:	d018      	beq.n	8002f3e <HAL_TIM_Base_Start_IT+0x76>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_TIM_Base_Start_IT+0x76>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1e      	ldr	r2, [pc, #120]	; (8002f94 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00e      	beq.n	8002f3e <HAL_TIM_Base_Start_IT+0x76>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_TIM_Base_Start_IT+0x76>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1b      	ldr	r2, [pc, #108]	; (8002f9c <HAL_TIM_Base_Start_IT+0xd4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_TIM_Base_Start_IT+0x76>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d115      	bne.n	8002f6a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b06      	cmp	r3, #6
 8002f4e:	d015      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0xb4>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f56:	d011      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f68:	e008      	b.n	8002f7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e000      	b.n	8002f7e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	40012c00 	.word	0x40012c00
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40013400 	.word	0x40013400
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	00010007 	.word	0x00010007

08002fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d122      	bne.n	8003004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d11b      	bne.n	8003004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0202 	mvn.w	r2, #2
 8002fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f9ce 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 8002ff0:	e005      	b.n	8002ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f9c0 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f9d1 	bl	80033a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d122      	bne.n	8003058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b04      	cmp	r3, #4
 800301e:	d11b      	bne.n	8003058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0204 	mvn.w	r2, #4
 8003028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f9a4 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 8003044:	e005      	b.n	8003052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f996 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f9a7 	bl	80033a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b08      	cmp	r3, #8
 8003064:	d122      	bne.n	80030ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b08      	cmp	r3, #8
 8003072:	d11b      	bne.n	80030ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0208 	mvn.w	r2, #8
 800307c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2204      	movs	r2, #4
 8003082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f97a 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 8003098:	e005      	b.n	80030a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f96c 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f97d 	bl	80033a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d122      	bne.n	8003100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d11b      	bne.n	8003100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0210 	mvn.w	r2, #16
 80030d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2208      	movs	r2, #8
 80030d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f950 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 80030ec:	e005      	b.n	80030fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f942 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f953 	bl	80033a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b01      	cmp	r3, #1
 800310c:	d10e      	bne.n	800312c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d107      	bne.n	800312c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0201 	mvn.w	r2, #1
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd faae 	bl	8000688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b80      	cmp	r3, #128	; 0x80
 8003138:	d10e      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	2b80      	cmp	r3, #128	; 0x80
 8003146:	d107      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fafe 	bl	8003754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003166:	d10e      	bne.n	8003186 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003172:	2b80      	cmp	r3, #128	; 0x80
 8003174:	d107      	bne.n	8003186 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800317e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 faf1 	bl	8003768 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d10e      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d107      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f901 	bl	80033b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d10e      	bne.n	80031de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d107      	bne.n	80031de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f06f 0220 	mvn.w	r2, #32
 80031d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fab1 	bl	8003740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_TIM_ConfigClockSource+0x1c>
 80031fe:	2302      	movs	r3, #2
 8003200:	e0b6      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x18a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2202      	movs	r2, #2
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003220:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003224:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800322c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323e:	d03e      	beq.n	80032be <HAL_TIM_ConfigClockSource+0xd8>
 8003240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003244:	f200 8087 	bhi.w	8003356 <HAL_TIM_ConfigClockSource+0x170>
 8003248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324c:	f000 8086 	beq.w	800335c <HAL_TIM_ConfigClockSource+0x176>
 8003250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003254:	d87f      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
 8003256:	2b70      	cmp	r3, #112	; 0x70
 8003258:	d01a      	beq.n	8003290 <HAL_TIM_ConfigClockSource+0xaa>
 800325a:	2b70      	cmp	r3, #112	; 0x70
 800325c:	d87b      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
 800325e:	2b60      	cmp	r3, #96	; 0x60
 8003260:	d050      	beq.n	8003304 <HAL_TIM_ConfigClockSource+0x11e>
 8003262:	2b60      	cmp	r3, #96	; 0x60
 8003264:	d877      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
 8003266:	2b50      	cmp	r3, #80	; 0x50
 8003268:	d03c      	beq.n	80032e4 <HAL_TIM_ConfigClockSource+0xfe>
 800326a:	2b50      	cmp	r3, #80	; 0x50
 800326c:	d873      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d058      	beq.n	8003324 <HAL_TIM_ConfigClockSource+0x13e>
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d86f      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
 8003276:	2b30      	cmp	r3, #48	; 0x30
 8003278:	d064      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0x15e>
 800327a:	2b30      	cmp	r3, #48	; 0x30
 800327c:	d86b      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
 800327e:	2b20      	cmp	r3, #32
 8003280:	d060      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0x15e>
 8003282:	2b20      	cmp	r3, #32
 8003284:	d867      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d05c      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0x15e>
 800328a:	2b10      	cmp	r3, #16
 800328c:	d05a      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0x15e>
 800328e:	e062      	b.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	6899      	ldr	r1, [r3, #8]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f000 f9a6 	bl	80035f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	609a      	str	r2, [r3, #8]
      break;
 80032bc:	e04f      	b.n	800335e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6899      	ldr	r1, [r3, #8]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f000 f98f 	bl	80035f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e0:	609a      	str	r2, [r3, #8]
      break;
 80032e2:	e03c      	b.n	800335e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	461a      	mov	r2, r3
 80032f2:	f000 f903 	bl	80034fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2150      	movs	r1, #80	; 0x50
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 f95c 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 8003302:	e02c      	b.n	800335e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	461a      	mov	r2, r3
 8003312:	f000 f922 	bl	800355a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2160      	movs	r1, #96	; 0x60
 800331c:	4618      	mov	r0, r3
 800331e:	f000 f94c 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 8003322:	e01c      	b.n	800335e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6859      	ldr	r1, [r3, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	461a      	mov	r2, r3
 8003332:	f000 f8e3 	bl	80034fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2140      	movs	r1, #64	; 0x40
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f93c 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 8003342:	e00c      	b.n	800335e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f000 f933 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 8003354:	e003      	b.n	800335e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
      break;
 800335a:	e000      	b.n	800335e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800335c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a40      	ldr	r2, [pc, #256]	; (80034dc <TIM_Base_SetConfig+0x114>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e6:	d00f      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3d      	ldr	r2, [pc, #244]	; (80034e0 <TIM_Base_SetConfig+0x118>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00b      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a3c      	ldr	r2, [pc, #240]	; (80034e4 <TIM_Base_SetConfig+0x11c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d007      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a3b      	ldr	r2, [pc, #236]	; (80034e8 <TIM_Base_SetConfig+0x120>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d003      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a3a      	ldr	r2, [pc, #232]	; (80034ec <TIM_Base_SetConfig+0x124>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d108      	bne.n	800341a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a2f      	ldr	r2, [pc, #188]	; (80034dc <TIM_Base_SetConfig+0x114>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d01f      	beq.n	8003462 <TIM_Base_SetConfig+0x9a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003428:	d01b      	beq.n	8003462 <TIM_Base_SetConfig+0x9a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a2c      	ldr	r2, [pc, #176]	; (80034e0 <TIM_Base_SetConfig+0x118>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d017      	beq.n	8003462 <TIM_Base_SetConfig+0x9a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a2b      	ldr	r2, [pc, #172]	; (80034e4 <TIM_Base_SetConfig+0x11c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <TIM_Base_SetConfig+0x9a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a2a      	ldr	r2, [pc, #168]	; (80034e8 <TIM_Base_SetConfig+0x120>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00f      	beq.n	8003462 <TIM_Base_SetConfig+0x9a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a29      	ldr	r2, [pc, #164]	; (80034ec <TIM_Base_SetConfig+0x124>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00b      	beq.n	8003462 <TIM_Base_SetConfig+0x9a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a28      	ldr	r2, [pc, #160]	; (80034f0 <TIM_Base_SetConfig+0x128>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <TIM_Base_SetConfig+0x9a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a27      	ldr	r2, [pc, #156]	; (80034f4 <TIM_Base_SetConfig+0x12c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d003      	beq.n	8003462 <TIM_Base_SetConfig+0x9a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a26      	ldr	r2, [pc, #152]	; (80034f8 <TIM_Base_SetConfig+0x130>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d108      	bne.n	8003474 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a10      	ldr	r2, [pc, #64]	; (80034dc <TIM_Base_SetConfig+0x114>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00f      	beq.n	80034c0 <TIM_Base_SetConfig+0xf8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a12      	ldr	r2, [pc, #72]	; (80034ec <TIM_Base_SetConfig+0x124>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <TIM_Base_SetConfig+0xf8>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a11      	ldr	r2, [pc, #68]	; (80034f0 <TIM_Base_SetConfig+0x128>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d007      	beq.n	80034c0 <TIM_Base_SetConfig+0xf8>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a10      	ldr	r2, [pc, #64]	; (80034f4 <TIM_Base_SetConfig+0x12c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_Base_SetConfig+0xf8>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a0f      	ldr	r2, [pc, #60]	; (80034f8 <TIM_Base_SetConfig+0x130>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d103      	bne.n	80034c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	615a      	str	r2, [r3, #20]
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	40000400 	.word	0x40000400
 80034e4:	40000800 	.word	0x40000800
 80034e8:	40000c00 	.word	0x40000c00
 80034ec:	40013400 	.word	0x40013400
 80034f0:	40014000 	.word	0x40014000
 80034f4:	40014400 	.word	0x40014400
 80034f8:	40014800 	.word	0x40014800

080034fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f023 0201 	bic.w	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f023 030a 	bic.w	r3, r3, #10
 8003538:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	621a      	str	r2, [r3, #32]
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800355a:	b480      	push	{r7}
 800355c:	b087      	sub	sp, #28
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f023 0210 	bic.w	r2, r3, #16
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003584:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	031b      	lsls	r3, r3, #12
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003596:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	621a      	str	r2, [r3, #32]
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f043 0307 	orr.w	r3, r3, #7
 80035dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	609a      	str	r2, [r3, #8]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800360a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	021a      	lsls	r2, r3, #8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	431a      	orrs	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	609a      	str	r2, [r3, #8]
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003644:	2302      	movs	r3, #2
 8003646:	e068      	b.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2e      	ldr	r2, [pc, #184]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2d      	ldr	r2, [pc, #180]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d108      	bne.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003682:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003694:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01d      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ba:	d018      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1b      	ldr	r2, [pc, #108]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d013      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1a      	ldr	r2, [pc, #104]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00e      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a18      	ldr	r2, [pc, #96]	; (8003738 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d009      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a13      	ldr	r2, [pc, #76]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a14      	ldr	r2, [pc, #80]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d10c      	bne.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40012c00 	.word	0x40012c00
 800372c:	40013400 	.word	0x40013400
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800
 8003738:	40000c00 	.word	0x40000c00
 800373c:	40014000 	.word	0x40014000

08003740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <__libc_init_array>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d0d      	ldr	r5, [pc, #52]	; (80037b4 <__libc_init_array+0x38>)
 8003780:	4c0d      	ldr	r4, [pc, #52]	; (80037b8 <__libc_init_array+0x3c>)
 8003782:	1b64      	subs	r4, r4, r5
 8003784:	10a4      	asrs	r4, r4, #2
 8003786:	2600      	movs	r6, #0
 8003788:	42a6      	cmp	r6, r4
 800378a:	d109      	bne.n	80037a0 <__libc_init_array+0x24>
 800378c:	4d0b      	ldr	r5, [pc, #44]	; (80037bc <__libc_init_array+0x40>)
 800378e:	4c0c      	ldr	r4, [pc, #48]	; (80037c0 <__libc_init_array+0x44>)
 8003790:	f000 f820 	bl	80037d4 <_init>
 8003794:	1b64      	subs	r4, r4, r5
 8003796:	10a4      	asrs	r4, r4, #2
 8003798:	2600      	movs	r6, #0
 800379a:	42a6      	cmp	r6, r4
 800379c:	d105      	bne.n	80037aa <__libc_init_array+0x2e>
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a4:	4798      	blx	r3
 80037a6:	3601      	adds	r6, #1
 80037a8:	e7ee      	b.n	8003788 <__libc_init_array+0xc>
 80037aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ae:	4798      	blx	r3
 80037b0:	3601      	adds	r6, #1
 80037b2:	e7f2      	b.n	800379a <__libc_init_array+0x1e>
 80037b4:	0800382c 	.word	0x0800382c
 80037b8:	0800382c 	.word	0x0800382c
 80037bc:	0800382c 	.word	0x0800382c
 80037c0:	08003830 	.word	0x08003830

080037c4 <memset>:
 80037c4:	4402      	add	r2, r0
 80037c6:	4603      	mov	r3, r0
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d100      	bne.n	80037ce <memset+0xa>
 80037cc:	4770      	bx	lr
 80037ce:	f803 1b01 	strb.w	r1, [r3], #1
 80037d2:	e7f9      	b.n	80037c8 <memset+0x4>

080037d4 <_init>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	bf00      	nop
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr

080037e0 <_fini>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	bf00      	nop
 80037e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e6:	bc08      	pop	{r3}
 80037e8:	469e      	mov	lr, r3
 80037ea:	4770      	bx	lr
